
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.LinkedList;
import java_cup.runtime.*;
import java.util.ArrayList;
import Errores.MyError;
import Analizadores.Arbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\005\000\002\005\004\000\002\005\003" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\004\000\002\007\003\000\002\007\004\000\002\007" +
    "\003\000\002\010\011\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\011\007\000\002\014\006\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\005\000\002\014\005\000\002\014\007\000\002\014\007" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\007\000\002\014\007\000\002" +
    "\014\011\000\002\014\005\000\002\014\007\000\002\014" +
    "\007\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\007\000\002\014\007\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\007\000\002\014\007\000\002\014" +
    "\011\000\002\014\005\000\002\014\007\000\002\014\007" +
    "\000\002\014\005\000\002\014\005\000\002\014\006\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\006\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\015\005\000\002\015\005\000\002\015\007" +
    "\000\002\015\007\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\007\000\002" +
    "\015\007\000\002\015\011\000\002\015\005\000\002\015" +
    "\007\000\002\015\007\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\007\000" +
    "\002\015\007\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\007\000\002\015" +
    "\007\000\002\015\011\000\002\015\005\000\002\015\007" +
    "\000\002\015\007\000\002\015\005\000\002\015\005\000" +
    "\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\003\005\004\004\001\002\000\010\003" +
    "\013\006\016\011\014\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\012\003\013\006\016\007\ufff8\011\014\001\002\000\004" +
    "\005\302\001\002\000\012\003\013\006\016\007\ufff9\011" +
    "\014\001\002\000\012\003\013\006\016\007\ufff6\011\014" +
    "\001\002\000\004\012\053\001\002\000\004\007\037\001" +
    "\002\000\004\010\017\001\002\000\004\011\020\001\002" +
    "\000\004\012\021\001\002\000\004\013\022\001\002\000" +
    "\006\015\024\017\023\001\002\000\010\014\033\020\034" +
    "\021\uffeb\001\002\000\010\014\027\020\030\021\uffee\001" +
    "\002\000\004\021\026\001\002\000\012\003\ufff1\006\ufff1" +
    "\007\ufff1\011\ufff1\001\002\000\006\015\024\017\023\001" +
    "\002\000\004\015\031\001\002\000\004\021\uffef\001\002" +
    "\000\004\021\ufff0\001\002\000\006\015\024\017\023\001" +
    "\002\000\004\017\035\001\002\000\004\021\uffec\001\002" +
    "\000\004\021\uffed\001\002\000\010\003\ufffc\007\037\011" +
    "\ufffc\001\002\000\006\003\041\011\043\001\002\000\010" +
    "\003\041\005\ufff2\011\043\001\002\000\004\005\ufffe\001" +
    "\002\000\004\010\046\001\002\000\010\003\041\005\ufff4" +
    "\011\043\001\002\000\004\005\ufff5\001\002\000\004\027" +
    "\047\001\002\000\004\021\050\001\002\000\010\003\uff9d" +
    "\005\uff9d\011\uff9d\001\002\000\004\005\ufff3\001\002\000" +
    "\006\003\ufffd\011\ufffd\001\002\000\004\013\054\001\002" +
    "\000\014\022\061\023\062\024\055\025\056\026\057\001" +
    "\002\000\014\004\273\022\163\023\164\027\275\032\274" +
    "\001\002\000\014\004\265\022\163\023\164\027\267\032" +
    "\266\001\002\000\014\004\161\022\163\023\164\027\165" +
    "\032\162\001\002\000\004\021\157\001\002\000\022\004" +
    "\123\022\061\023\062\024\055\025\056\026\057\027\121" +
    "\032\124\001\002\000\022\004\065\022\061\023\062\024" +
    "\055\025\056\026\057\027\063\032\066\001\002\000\022" +
    "\004\115\022\061\023\062\024\055\025\056\026\057\027" +
    "\113\032\116\001\002\000\022\004\107\022\061\023\062" +
    "\024\055\025\056\026\057\027\105\032\110\001\002\000" +
    "\004\011\075\001\002\000\022\004\071\022\061\023\062" +
    "\024\055\025\056\026\057\027\067\032\072\001\002\000" +
    "\024\004\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\032\uffd0\001\002\000\024\004\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\032\uffca\001\002\000\004\011\073\001\002\000\024\004" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\032\uffc6\001\002\000\004\005\074\001\002\000" +
    "\024\004\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\032\uffc8\001\002\000\004\005\076\001" +
    "\002\000\022\004\101\022\061\023\062\024\055\025\056" +
    "\026\057\027\077\032\102\001\002\000\024\004\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\032\uffd3\001\002\000\024\004\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\032\uffcd\001\002" +
    "\000\004\011\103\001\002\000\024\004\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\032\uffc9" +
    "\001\002\000\004\005\104\001\002\000\024\004\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\032\uffcb\001\002\000\024\004\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\001\002" +
    "\000\024\004\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\032\uffce\001\002\000\004\011\111" +
    "\001\002\000\024\004\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\032\uffc7\001\002\000\004" +
    "\005\112\001\002\000\024\004\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\032\uffcc\001\002" +
    "\000\024\004\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\032\uffd1\001\002\000\024\004\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\032\uffd5\001\002\000\004\011\117\001\002\000\024" +
    "\004\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\032\uffcf\001\002\000\004\005\120\001\002" +
    "\000\024\004\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\032\uffd2\001\002\000\022\004\153" +
    "\022\061\023\062\024\055\025\056\026\057\027\151\032" +
    "\154\001\002\000\022\004\145\022\061\023\062\024\055" +
    "\025\056\026\057\027\143\032\146\001\002\000\004\011" +
    "\133\001\002\000\022\004\127\022\061\023\062\024\055" +
    "\025\056\026\057\027\125\032\130\001\002\000\024\004" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\032\uffe0\001\002\000\024\004\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\032\uffda" +
    "\001\002\000\004\011\131\001\002\000\024\004\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\032\uffd6\001\002\000\004\005\132\001\002\000\024\004" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\032\uffd8\001\002\000\004\005\134\001\002\000" +
    "\022\004\137\022\061\023\062\024\055\025\056\026\057" +
    "\027\135\032\140\001\002\000\024\004\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\032\uffe3" +
    "\001\002\000\024\004\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\032\uffdd\001\002\000\004" +
    "\011\141\001\002\000\024\004\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\032\uffd9\001\002" +
    "\000\004\005\142\001\002\000\024\004\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb" +
    "\001\002\000\024\004\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\032\uffe4\001\002\000\024" +
    "\004\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\032\uffde\001\002\000\004\011\147\001\002" +
    "\000\024\004\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\032\uffd7\001\002\000\004\005\150" +
    "\001\002\000\024\004\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\032\uffdc\001\002\000\024" +
    "\004\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\032\uffe1\001\002\000\024\004\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\032" +
    "\uffe5\001\002\000\004\011\155\001\002\000\024\004\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\032\uffdf\001\002\000\004\005\156\001\002\000\024" +
    "\004\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\032\uffe2\001\002\000\012\003\uffea\006\uffea" +
    "\007\uffea\011\uffea\001\002\000\024\004\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\032\uffc3" +
    "\001\002\000\004\011\262\001\002\000\024\004\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\032\uffc2\001\002\000\022\004\226\022\061\023\062\024" +
    "\055\025\056\026\057\027\224\032\227\001\002\000\022" +
    "\004\170\022\061\023\062\024\055\025\056\026\057\027" +
    "\166\032\171\001\002\000\024\004\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\032\uffc4\001" +
    "\002\000\022\004\220\022\061\023\062\024\055\025\056" +
    "\026\057\027\216\032\221\001\002\000\022\004\212\022" +
    "\061\023\062\024\055\025\056\026\057\027\210\032\213" +
    "\001\002\000\004\011\200\001\002\000\022\004\174\022" +
    "\061\023\062\024\055\025\056\026\057\027\172\032\175" +
    "\001\002\000\024\004\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\032\uffa8\001\002\000\024" +
    "\004\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\032\uffa2\001\002\000\004\011\176\001\002" +
    "\000\024\004\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\032\uff9e\001\002\000\004\005\177" +
    "\001\002\000\024\004\uffa0\021\uffa0\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\032\uffa0\001\002\000\004" +
    "\005\201\001\002\000\022\004\204\022\061\023\062\024" +
    "\055\025\056\026\057\027\202\032\205\001\002\000\024" +
    "\004\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\032\uffab\001\002\000\024\004\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\032" +
    "\uffa5\001\002\000\004\011\206\001\002\000\024\004\uffa1" +
    "\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\032\uffa1\001\002\000\004\005\207\001\002\000\024" +
    "\004\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\032\uffa3\001\002\000\024\004\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\032" +
    "\uffac\001\002\000\024\004\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\032\uffa6\001\002\000" +
    "\004\011\214\001\002\000\024\004\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\032\uff9f\001" +
    "\002\000\004\005\215\001\002\000\024\004\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\032" +
    "\uffa4\001\002\000\024\004\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\032\uffa9\001\002\000" +
    "\024\004\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\027\uffad\032\uffad\001\002\000\004\011\222\001" +
    "\002\000\024\004\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\032\uffa7\001\002\000\004\005" +
    "\223\001\002\000\024\004\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\032\uffaa\001\002\000" +
    "\022\004\256\022\061\023\062\024\055\025\056\026\057" +
    "\027\254\032\257\001\002\000\022\004\250\022\061\023" +
    "\062\024\055\025\056\026\057\027\246\032\251\001\002" +
    "\000\004\011\236\001\002\000\022\004\232\022\061\023" +
    "\062\024\055\025\056\026\057\027\230\032\233\001\002" +
    "\000\024\004\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\032\uffb8\001\002\000\024\004\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\032\uffb2\001\002\000\004\011\234\001\002\000\024" +
    "\004\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\032\uffae\001\002\000\004\005\235\001\002" +
    "\000\024\004\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\032\uffb0\001\002\000\004\005\237" +
    "\001\002\000\022\004\242\022\061\023\062\024\055\025" +
    "\056\026\057\027\240\032\243\001\002\000\024\004\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\032\uffbb\001\002\000\024\004\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\032\uffb5\001" +
    "\002\000\004\011\244\001\002\000\024\004\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\032" +
    "\uffb1\001\002\000\004\005\245\001\002\000\024\004\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\032\uffb3\001\002\000\024\004\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\032\uffbc\001" +
    "\002\000\024\004\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\032\uffb6\001\002\000\004\011" +
    "\252\001\002\000\024\004\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\032\uffaf\001\002\000" +
    "\004\005\253\001\002\000\024\004\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\032\uffb4\001" +
    "\002\000\024\004\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\032\uffb9\001\002\000\024\004" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\032\uffbd\001\002\000\004\011\260\001\002\000" +
    "\024\004\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\032\uffb7\001\002\000\004\005\261\001" +
    "\002\000\024\004\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\032\uffba\001\002\000\004\005" +
    "\263\001\002\000\024\004\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\032\uffc5\001\002\000" +
    "\024\004\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\032\uffbf\001\002\000\004\011\270\001" +
    "\002\000\024\004\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\032\uffbe\001\002\000\024\004" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\032\uffc0\001\002\000\004\005\271\001\002\000" +
    "\024\004\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\032\uffc1\001\002\000\024\004\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\032\uffe6\001\002\000\004\011\276\001\002\000\024\004" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\032\uffe8\001\002\000\024\004\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7" +
    "\001\002\000\004\005\277\001\002\000\024\004\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\032\uffe9\001\002\000\004\007\ufff7\001\002\000\004\007" +
    "\ufffb\001\002\000\004\002\000\001\002\000\004\007\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\002\005\001\001\000\012\003\010\006" +
    "\014\010\011\011\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\302\010\011\011" +
    "\007\001\001\000\002\001\001\000\010\006\300\010\011" +
    "\011\007\001\001\000\010\006\277\010\011\011\007\001" +
    "\001\000\002\001\001\000\004\005\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\051\001\001" +
    "\000\006\007\041\012\043\001\001\000\006\007\050\012" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\044\012\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\057\001" +
    "\001\000\004\015\271\001\001\000\004\015\263\001\001" +
    "\000\004\015\157\001\001\000\002\001\001\000\004\014" +
    "\121\001\001\000\004\014\063\001\001\000\004\014\113" +
    "\001\001\000\004\014\105\001\001\000\002\001\001\000" +
    "\004\014\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\151\001\001" +
    "\000\004\014\143\001\001\000\002\001\001\000\004\014" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\224\001" +
    "\001\000\004\014\166\001\001\000\002\001\001\000\004" +
    "\014\216\001\001\000\004\014\210\001\001\000\002\001" +
    "\001\000\004\014\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\254" +
    "\001\001\000\004\014\246\001\001\000\002\001\001\000" +
    "\004\014\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo raiz;
    public int i = 0;

    public void syntax_error(Symbol s){ 
        System.out.println("Error sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.Interfaz.errores.add(new MyError(s.left,s.right, (String) s.value,"Error sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."));
    } 
     
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        Interfaz.Interfaz.errores.add(new MyError(s.left,s.right, (String) s.value,"Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."));
    }  
    public LinkedList<Nodo> AST;
    Arbol lista = new Arbol();
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLIZQ instrucciones LLDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= SecDefER FinalSeccion SecLexemas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FinalSeccion ::= FINSECCION FinalSeccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FinalSeccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FinalSeccion ::= FINSECCION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FinalSeccion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SecDefER ::= conjunto SecDefER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecDefER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SecDefER ::= ER SecDefER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecDefER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SecDefER ::= conjunto 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecDefER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SecDefER ::= ER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecDefER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SecDefER ::= error SecDefER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecDefER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SecDefER ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecDefER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SecLexemas ::= lexema SecLexemas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecLexemas",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SecLexemas ::= lexema 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecLexemas",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SecLexemas ::= error SecLexemas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecLexemas",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SecLexemas ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SecLexemas",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conjunto ::= RESERVADA DOSPUNTOS IDENTIFICADOR GUION MAYORQ notacionConj PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conjunto",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // notacionConj ::= ALFABETO COMA notacionConj 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacionConj",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // notacionConj ::= ALFABETO RANGO ALFABETO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacionConj",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // notacionConj ::= ALFABETO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacionConj",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // notacionConj ::= CESPECIAL COMA notacionConj 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacionConj",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // notacionConj ::= CESPECIAL RANGO CESPECIAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacionConj",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // notacionConj ::= CESPECIAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("notacionConj",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ER ::= IDENTIFICADOR GUION MAYORQ ERpolaca PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Nodo padre = new Nodo();
                                                    i++;
                                                    padre.idHoja = i;
                                                    padre.valor = ".";
                                                    Nodo hijo = new Nodo();
                                                    i++;
                                                    hijo.idHoja = i;
                                                    hijo.valor = "#";
                                                    padre.Anulable = "No anulable";
                                                    hijo.Anulable = "No anulable";
                                                    padre.left = (Nodo) a;
                                                    padre.right = hijo;
                                                    lista.addAST(padre);
                                                     i = 0;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ER",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ERpolaca ::= CEROMAS LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        i++;
                        padre.idHoja = i;
                        padre.valor = a;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        i++;
                        hijo.idHoja = i;
                        hijo.valor = b;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ERpolaca ::= CEROMAS ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ERpolaca ::= CEROMAS CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ERpolaca ::= CEROMAS ERPolMul 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        padre.left = (Nodo) b;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ERpolaca ::= CONCATENACION CADENA ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ERpolaca ::= CONCATENACION ERpolaca CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ERpolaca ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ERpolaca ::= CONCATENACION CADENA LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ERpolaca ::= CONCATENACION CADENA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ERpolaca ::= CONCATENACION ESP CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ERpolaca ::= CONCATENACION CADENA ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ERpolaca ::= CONCATENACION ERpolaca ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ERpolaca ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ERpolaca ::= CONCATENACION ERpolaca LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ERpolaca ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ERpolaca ::= CONCATENACION ESP ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ERpolaca ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ERpolaca ::= CONCATENACION ESP LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ERpolaca ::= CONCATENACION ERpolaca ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ERpolaca ::= CONCATENACION ESP ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ERpolaca ::= DISYUNCION CADENA ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ERpolaca ::= DISYUNCION ERpolaca CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ERpolaca ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ERpolaca ::= DISYUNCION CADENA LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ERpolaca ::= DISYUNCION CADENA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ERpolaca ::= DISYUNCION ESP CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ERpolaca ::= DISYUNCION CADENA ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ERpolaca ::= DISYUNCION ERpolaca ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ERpolaca ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ERpolaca ::= DISYUNCION ERpolaca LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ERpolaca ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ERpolaca ::= DISYUNCION ESP ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ERpolaca ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ERpolaca ::= DISYUNCION ESP LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ERpolaca ::= DISYUNCION ERpolaca ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ERpolaca ::= DISYUNCION ESP ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ERpolaca ::= UNOMAS LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "No anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ERpolaca ::= UNOMAS CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "No anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ERpolaca ::= UNOMAS ERPolMul 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) b;
                        if(hijo.Anulable.equals("No anulable")){
                            padre.Anulable = "No anulable";
                        }else{
                            padre.Anulable = "Anulable";
                        }
                        padre.left = (Nodo) b;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ERpolaca ::= UNOMAS ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "No anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ERpolaca ::= CEROUNA LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ERpolaca ::= CEROUNA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ERpolaca ::= CEROUNA ERPolMul 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        padre.left = (Nodo) b;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ERpolaca ::= CEROUNA ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERpolaca",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ERPolMul ::= CONCATENACION CADENA ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ERPolMul ::= CONCATENACION ERpolaca CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ERPolMul ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ERPolMul ::= CONCATENACION CADENA LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ERPolMul ::= CONCATENACION CADENA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ERPolMul ::= CONCATENACION ESP CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ERPolMul ::= CONCATENACION CADENA ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ERPolMul ::= CONCATENACION ERpolaca ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ERPolMul ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ERPolMul ::= CONCATENACION ERpolaca LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ERPolMul ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ERPolMul ::= CONCATENACION ESP ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ERPolMul ::= CONCATENACION LLIZQ IDENTIFICADOR LLDER ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ERPolMul ::= CONCATENACION ESP LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ERPolMul ::= CONCATENACION ERpolaca ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ERPolMul ::= CONCATENACION ESP ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ERPolMul ::= DISYUNCION CADENA ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ERPolMul ::= DISYUNCION ERpolaca CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ERPolMul ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ERPolMul ::= DISYUNCION CADENA LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ERPolMul ::= DISYUNCION CADENA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ERPolMul ::= DISYUNCION ESP CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ERPolMul ::= DISYUNCION CADENA ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ERPolMul ::= DISYUNCION ERpolaca ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ERPolMul ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ERPolMul ::= DISYUNCION ERpolaca LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ERPolMul ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ERPolMul ::= DISYUNCION ESP ERpolaca 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ERPolMul ::= DISYUNCION LLIZQ IDENTIFICADOR LLDER ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ERPolMul ::= DISYUNCION ESP LLIZQ IDENTIFICADOR LLDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ERPolMul ::= DISYUNCION ERpolaca ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ERPolMul ::= DISYUNCION ESP ESP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ERPolMul",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lexema ::= IDENTIFICADOR DOSPUNTOS CADENA PTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lexema",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
