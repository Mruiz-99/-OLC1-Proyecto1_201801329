package Analizadores; 
import java.util.LinkedList;
import java_cup.runtime.*;
import java.util.ArrayList;
import Errores.MyError;
import Analizadores.Arbol;

parser code 
{:
    public static Nodo raiz;
    public int i = 0;

    public void syntax_error(Symbol s){ 
        System.out.println("Error sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.Interfaz.errores.add(new MyError(s.left,s.right, (String) s.value,"Error sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."));
    } 
     
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
        Interfaz.Interfaz.errores.add(new MyError(s.left,s.right, (String) s.value,"Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."));
    }  
    public LinkedList<Nodo> AST;
    Arbol lista = new Arbol();
    public LinkedList<Nodo> getAST() {
        return AST;
    }
:} 

terminal String LLIZQ,LLDER, RESERVADA, FINSECCION, DOSPUNTOS, IDENTIFICADOR, GUION, MAYORQ, COMA, ALFABETO,COMILLASDOBLES, CESPECIAL;
terminal String RANGO, PTCOMA, CONCATENACION, DISYUNCION, CEROMAS, CEROUNA, UNOMAS, CADENA, DECIMAL, COMILLA,ESP;


non terminal inicio;
non terminal instrucciones;
non terminal SecConjuntos;
non terminal FinalSeccion;
non terminal SecDefER;
non terminal SecLexemas;
non terminal conjunto;
non terminal Nodo ER;
non terminal lexema;
non terminal notacionConj;
non terminal ERpolaca;
non terminal ERPolMul;


start with inicio; 

inicio::= 
    LLIZQ instrucciones LLDER 
    | error 

;
instrucciones ::= 
    SecDefER:a FinalSeccion SecLexemas 
; 

FinalSeccion ::= 
     FINSECCION FinalSeccion
|    FINSECCION
; 

SecDefER ::= 
       conjunto SecDefER
   |   ER SecDefER
   |   conjunto
   |   ER
   |   error SecDefER
   |   error 
; 


SecLexemas ::= 
   lexema SecLexemas
   | lexema
   | error SecLexemas
   | error 
; 

conjunto ::= 
   RESERVADA DOSPUNTOS IDENTIFICADOR GUION MAYORQ notacionConj PTCOMA
; 
               
notacionConj ::= 
   ALFABETO COMA notacionConj
|  ALFABETO RANGO ALFABETO
|  ALFABETO
|  CESPECIAL COMA notacionConj
|  CESPECIAL RANGO CESPECIAL
|  CESPECIAL
; 

ER ::= 
   IDENTIFICADOR GUION MAYORQ  ERpolaca:a  PTCOMA  {:Nodo padre = new Nodo();
                                                    i++;
                                                    padre.idHoja = i;
                                                    padre.valor = ".";
                                                    Nodo hijo = new Nodo();
                                                    i++;
                                                    hijo.idHoja = i;
                                                    hijo.valor = "#";
                                                    padre.Anulable = "No anulable";
                                                    hijo.Anulable = "No anulable";
                                                    padre.left = (Nodo) a;
                                                    padre.right = hijo;
                                                    lista.addAST(padre);
                                                     i = 0;:}
; 

ERpolaca ::= 
   CEROMAS:a LLIZQ IDENTIFICADOR:b LLDER {:
                        Nodo padre = new Nodo();
                        i++;
                        padre.idHoja = i;
                        padre.valor = a;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        i++;
                        hijo.idHoja = i;
                        hijo.valor = b;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  CEROMAS:a ESP:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  CEROMAS:a CADENA:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  CEROMAS:a ERPolMul:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        padre.left = (Nodo) b;
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}


|  CONCATENACION:a ERpolaca:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    :}
|  CONCATENACION:a ESP:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ERpolaca:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ERpolaca:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}




|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a  ESP:b  ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ESP:b LLIZQ IDENTIFICADOR:c LLDER  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ERpolaca:b  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a  ESP:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}

|  DISYUNCION:a CADENA:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}


|  DISYUNCION:a ERpolaca:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a CADENA:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a CADENA:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    :}
|  DISYUNCION:a ESP:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a CADENA:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ERpolaca:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ERpolaca:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a  ESP:b  ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ESP:b LLIZQ IDENTIFICADOR:c LLDER  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ERpolaca:b  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a  ESP:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}

|  UNOMAS:a LLIZQ IDENTIFICADOR:b LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "No anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  UNOMAS:a CADENA:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "No anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  UNOMAS:a ERPolMul:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) b;
                        if(hijo.Anulable.equals("No anulable")){
                            padre.Anulable = "No anulable";
                        }else{
                            padre.Anulable = "Anulable";
                        }
                        padre.left = (Nodo) b;
                        RESULT = padre;
                    :}
|  UNOMAS:a ESP:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "No anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  CEROUNA:a LLIZQ IDENTIFICADOR:b LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  CEROUNA:a CADENA:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}
|  CEROUNA:a ERPolMul:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        padre.left = (Nodo) b;
                        RESULT = padre;
                    :}
|  CEROUNA:a ESP:b {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.Anulable = "Anulable";
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        RESULT = padre;
                    :}

; 

ERPolMul ::= 

CONCATENACION:a CADENA:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}


|  CONCATENACION:a ERpolaca:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    :}
|  CONCATENACION:a ESP:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a CADENA:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ERpolaca:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ERpolaca:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}




|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a  ESP:b  ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a LLIZQ IDENTIFICADOR:b LLDER  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ESP:b LLIZQ IDENTIFICADOR:c LLDER  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a ERpolaca:b  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) && (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  CONCATENACION:a  ESP:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) && (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}

|  DISYUNCION:a CADENA:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}


|  DISYUNCION:a ERpolaca:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a CADENA:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a CADENA:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        padre.left = hijo;
                        padre.right = hijo2;
                        RESULT = padre;
                    :}
|  DISYUNCION:a ESP:b CADENA:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a CADENA:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ERpolaca:b ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        padre.right = (Nodo) c;
                        padre.left = (Nodo) b;
                        Nodo hijo = new Nodo();
                        hijo = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ERpolaca:b LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER LLIZQ IDENTIFICADOR:c LLDER {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a  ESP:b  ERpolaca:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = (Nodo) c;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) c;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a LLIZQ IDENTIFICADOR:b LLDER  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ESP:b LLIZQ IDENTIFICADOR:c LLDER  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        padre.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a ERpolaca:b  ESP:c  {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = c;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        padre.right = hijo;
                        padre.left = (Nodo) b;
                        Nodo hijo2 = new Nodo();
                        hijo2 = (Nodo) b;
                        if((hijo2.Anulable.equals("Anulable")) || (hijo.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
|  DISYUNCION:a  ESP:b ESP:c {:
                        Nodo padre = new Nodo();
                        padre.valor = a;
                        i++;
                        padre.idHoja = i;
                        Nodo hijo = new Nodo();
                        hijo.valor = b;
                        i++;
                        hijo.idHoja = i;
                        hijo.Anulable = "No anulable";
                        Nodo hijo2 = new Nodo();
                        hijo2.valor = c;
                        i++;
                        hijo2.idHoja = i;
                        hijo2.Anulable = "No anulable";
                        padre.left = hijo;
                        padre.right = hijo2;
                        if((hijo.Anulable.equals("Anulable")) || (hijo2.Anulable.equals("Anulable"))){
                            padre.Anulable = "Anulable";
                        }else{
                            padre.Anulable = "No anulable";
                        }
                        RESULT = padre;
                    :}
;

lexema ::= 
   IDENTIFICADOR DOSPUNTOS CADENA PTCOMA
; 

